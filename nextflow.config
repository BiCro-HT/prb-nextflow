// inspired from Luuk's config

// Git branch specification
manifest.defaultBranch = 'master'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

params {

    samplesheet = "null"

    // defaults
    length = 40
    nt = "DNA"
    tempMelting = 72
    threads = 40
    maxConsec = 24
    maxConsecPolymer = 6
    countRepeat = 100

    // Defaults Resource options
    max_memory = "1.GB"
    max_cpus = 1
    max_time = "2.h"	
}



profiles {
     test { includeConfig 'conf/test.config' }
     ht_hpc { includeConfig 'conf/ht_hpc.config' }
     uppmax { includeConfig 'conf/uppmax.config' }
     sirius { includeConfig 'conf/sirius.config' }
     lhpc { includeConfig 'conf/lhpc.config' }
     test_docker { includeConfig 'conf/test_docker.config'}
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}